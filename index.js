require("dotenv").config();
const express = require("express");
const cors = require("cors");
const app = express();
const bodyParser = require("body-parser");
const isvalidURL = require("is-url");
const mongoose = require("mongoose");
const fs = require("fs");
const ejs = require("ejs");
const qrcode = require("qrcode");

// Basic Configuration
const port = process.env.PORT || 3000;

const html = fs.readFileSync(process.cwd() + "/views/error.html", "utf-8");
const main = fs.readFileSync(process.cwd() + "/views/main.html", "utf-8");

app.use(express.json());
app.use(cors());
app.use(bodyParser.urlencoded({ extended: false }));

app.set('view engine', 'ejs');

const MONGOVALUE = process.env.MONGO_URI;

//Connecting with database
mongoose.connect(MONGOVALUE, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 5000,
});

//Checking if connection occured
const connection = mongoose.connection;
connection.on("error", console.error.bind(console, "connection error:"));
connection.once("open", () => {
  console.log("MongoDB connection established succesfully");
});

//Creating a new Schema with two values
const URLSchema = new mongoose.Schema({
  URL: { type: String },
  shorten: { type: String },
});

//Creating a model
const URLModel = mongoose.model("URL", URLSchema);

app.post("/api", async function (req, res) {
  //Receiving URL from user
  const url = req.body.url;

  //Checking if URL is valid
  if (!isvalidURL(url)) {
    //Sending response
    res.end(
      html
        .replace("{{%%ERROR / SHORTURL STATEMENT}}", "400 Error!!")
        .replace("{{%%LINK / ERROR DEF}}", "Invalid URL Input")
        .replace(
          "{{%%CORRECTION}}",
          "Go back & ensure that your URL is properly entered"
        )
    );
    //Ends the running of the app.post function
    return;
  }

  //Declaring identifier
  let identifier;

  //A variable that will determine whether the model is saved
  let save = true;

  //Checking whether a domain has been provided ny user
  if (!req.body.domain) {
    //Checking if the user URL input is in database
    let urlJSONformat = await URLModel.findOne({ URL: url });

    if (urlJSONformat) {
      //Providing the identifier stored in DB
      identifier = urlJSONformat["shorten"];

      //Since the URL is already in DB, no need to save again
      save = false;
    } else {
      //Loop runs continuously until it finds an identifier not already stored in DB
      while (true) {
        identifier = Math.random().toString(36).substring(2, 8);
        let identifierJSONformat = await URLModel.findOne({
          shorten: identifier,
        });
        //If identifier not in DB, break out of loop
        if (!identifierJSONformat) {
          break;
        }
      }
    }
  } else {
    //Initialising identifier with the domain input by user
    identifier = req.body.domain;

    //Checks if the domain has already been used
    let identifierJSONformat = await URLModel.findOne({
      shorten: identifier,
    });

    //If the domain is alreasy used, then error page is sent
    if (identifierJSONformat) {
      res.end(
        html
          .replace("{{%%ERROR / SHORTURL STATEMENT}}", "409 Error!!")
          .replace(
            "{{%%LINK / ERROR DEF}}",
            "The requested domain has already been used"
          )
          .replace("{{%%CORRECTION}}", "Please Try Again!!")
      );
      return;
    } else if (identifier.includes(" ")){
      // Ensures that if any whitespaces are included, it will display an error page
      res.end(
        html
          .replace("{{%%ERROR / SHORTURL STATEMENT}}", "Error!!")
          .replace("{{%%LINK / ERROR DEF}}", "Domain cannot contain whitespaces")
          .replace("{{%%CORRECTION}}", "Please Try Using a different Domain or allow one to be autogenerated!!")
      );
      return;
    }
  }

  // Insert a new URL into a model with identifier
  const URLstorage = new URLModel({
    URL: url,
    shorten: identifier,
  });

  //Creating link
  const link = "https://acm-project.vercel.app/api/" + identifier;

  qrcode.toDataURL(link, (err, src) => {
    res.render("output", {
      qrcodeimage: src,
      link_display: link,
    });
  })

  //If save is true, then the URLModel that was just created in URLstorage is saved to Database
  if (save) {
    URLstorage.save();
  }
});

app.get("/api/:id", async function (req, res) {
  //Gettting ID
  const id = req.params.id;

  //Checking if ID in Database
  const URLjson = await URLModel.findOne({ shorten: id });

  // Checking if the ID was found
  if (URLjson) {
    const URL = URLjson["URL"];

    //Redirecting to required website
    res.redirect(URL);
  } else {
    // ID was not found and providing response
    res.end(
      html
        .replace("{{%%ERROR / SHORTURL STATEMENT}}", "404 Error!!")
        .replace("{{%%LINK / ERROR DEF}}", "Short URL not found")
        .replace(
          "{{%%CORRECTION}}",
          "Please check that the correct shortened URL was entered"
        )
    );
    return;
  }
});

app.post("/scan", async function (req, res) {
  console.log(req.params.qrlink)
});

//Gets the html File for the main page
app.get("/", function (req, res) {
  res.end(main);
});

app.listen(port, function () {
  console.log(`Listening on port ${port}`);
});
